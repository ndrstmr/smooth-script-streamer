[
    {
        "type": "direction",
        "text": "[Ein kurzer, moderner Jingle, der wie ein Code-Compiler-Sound endet. Musik blendet aus.]"
    },
    {
        "type": "speaker-a",
        "text": "Hallo und herzlich willkommen zur allerersten Folge von \"Entwickler-Behörde\"! Dem Live-Podcast, unterstützt von der \"public sector dev crew\". Hej, das seid ihr alle hier. Mein Name ist Andreas, Entwicklungsleiter für Web- und Shop-Portale hier bei Dataport. Normalerweise spreche ich über TYPO3-Themen oder Shopware und manchmal auch über Künstliche Intelligenz. Heute aber über ein Regelwerk. Dazu begrüße ich meinen Chef und heutigen Gast: Achim. Hallo Achim!"
    },
    {
        "type": "speaker-b",
        "text": "Hallo Andreas. Danke, dass ich bei der Premiere dabei sein darf."
    },
    {
        "type": "speaker-a",
        "text": "Sehr gerne. Achim, wir haben in den letzten Wochen, eine `Arbeitsanweisung für Open-Source-Veröffentlichungen` für unser CCW geschrieben. Bevor ich uns durch den Dschungel der Paragrafen führe, hol uns doch mal ab: Warum treibst du als Abteilungsleiter dieses Thema mit so einer Energie voran?"
    },
    {
        "type": "speaker-b",
        "text": "[begeistert] Weil das mehr als nur ein Dokument ist, Andreas! Das ist der Startschuss für einen echten Kulturwandel. Wir reden hier über die digitale Souveränität der Verwaltung. Der Grundsatz 'Public Money, Public Code' ist doch eine ethische Verpflichtung! Wir nehmen Steuergelder, um Software zu bauen – dann sollten wir sie auch zurückgeben. Wir öffnen die Türen unserer Werkstatt, lassen andere reinschauen, von uns lernen und wir lernen von ihnen. Das ist modern, das ist mutig und stärkt am Ende das Vertrauen in uns als öffentliche Hand."
    },
    {
        "type": "speaker-a",
        "text": "Das ist die Vision. Und damit diese Vision nicht im Chaos endet, haben wir versucht, einen praktischen Rahmen zu schaffen. Und darüber wollen wir heute sprechen. Ein zentraler Punkt sind die klaren Rollen. Ok, wir stellen uns das mal als \"Band-Analogie\" vor: Die Entwickler*innen sind die Musiker, die den Code schreiben. Die Produktverantwortlichen sind die Songwriter, die die Vision für den Hit haben."
    },
    {
        "type": "speaker-b",
        "text": "Ein super Bild! Denn genau das brauchen wir: ein eingespieltes Orchester. Jeder muss sein Instrument kennen, damit am Ende eine Symphonie und keine Kakophonie dabei herauskommt. Klare Rollen sind die Basis für kreative Freiheit."
    },
    {
        "type": "speaker-a",
        "text": "Und zur Rolle der Musiker, also der Entwickler, gehört noch ein wichtiger Punkt, der den Datenschutz von uns selbst betrifft. In der Anweisung steht, dass wir für öffentliche Beiträge nicht unsere persönlichen dienstlichen Adressen, sondern pseudonymisierte Adressen wie xyz@dev.dataport.de verwenden sollen."
    },
    {
        "type": "speaker-b",
        "text": "Genau, und das ist ein ganz entscheidender Punkt! Wir wollen transparent sein, aber gleichzeitig die Privatsphäre unserer Mitarbeiter*innen schützen. Niemand soll Sorge haben, im Netz persönlich angegangen zu werden. Diese Regelung schafft eine professionelle Distanz und sorgt für die nötige Sicherheit im Team."
    },
    {
        "type": "speaker-a",
        "text": "Gut, dann haben wir die Band und die E-Mail-Adressen. Aber es gibt ja noch das OSCC, das Open-Source-Competence-Center. In der Analogie ist das die Plattenfirma, die schaut, dass wir keine Urheberrechte verletzen."
    },
    {
        "type": "speaker-b",
        "text": "[lacht] Exakt! Die, die dafür sorgen, dass wir nach dem Release nicht verklagt werden. Das OSCC ist unser juristisches und prozessuales Gewissen. Und ich als Abteilungsleiter bin dann sozusagen der Produzent, der nach all den Checks sagt: \"Der Song hat Hit-Potenzial, den bringen wir raus!\""
    },
    {
        "type": "speaker-a",
        "text": "Perfekt. Dann lass uns über die Technik sprechen, das ist auch genau mein Part. Zum Beispiel Lizenzen. Wir haben als Standardlizenz die EUPL 1.2 genommen. Die ist für uns ideal: Sie wurde für den europäischen Rechtsraum geschaffen und ihre \"Copyleft\"-Klausel sorgt dafür, dass Weiterentwicklungen ebenfalls offen bleiben."
    },
    {
        "type": "speaker-b",
        "text": "Und genau das unterstreicht doch unseren europäischen, wertebasierten Ansatz! Wir nutzen keinen Lizenz-Wildwuchs, sondern einen stabilen Rahmen, der für alle verständlich ist und unsere Prinzipien schützt."
    },
    {
        "type": "speaker-a",
        "text": "Richtig. Für kleine, technische Bibliotheken haben wir aber auch Ausnahmen wie MIT oder Apache 2.0 vorgesehen, um maximale Wiederverwendung zu ermöglichen. Aber was, wenn wir externe Komponenten nutzen wollen? Um da den Überblick zu behalten, werden wir die SBOM, die \"Software Bill of Materials\", zur Pflicht machen."
    },
    {
        "type": "speaker-b",
        "text": "Ah, die berühmte \"Zutatenliste für Software\", wie du es nennst."
    },
    {
        "type": "speaker-a",
        "text": "[lacht] Genau. So wissen wir immer, was in unserem Code \"drinsteckt\" – welche Bibliotheken, welche Lizenzen, welche bekannten Sicherheitslücken. Das ist die Grundlage für jeden rechtlichen und technischen Check."
    },
    {
        "type": "speaker-b",
        "text": "Das ist gelebte Transparenz! Wir legen die Karten auf den Tisch. Das ist ehrlich und schafft eine ganz neue Ebene des Vertrauens, nach innen und nach außen."
    },
    {
        "type": "speaker-a",
        "text": "Absolut. Deshalb schreibt die Anweisung auch einen dreistufigen, automatisierten Sicherheitscheck vor: SAST, SCA und Secret Scanning."
    },
    {
        "type": "speaker-b",
        "text": "Okay, jetzt musst du die Kürzel für uns Normalsterbliche übersetzen, Andreas."
    },
    {
        "type": "speaker-a",
        "text": "Gerne. Stell es dir einfach vor: SAST (Static Application Security Testing) ist wie eine automatische Rechtschreibprüfung, nur für typische Sicherheitsfehler in unserem eigenen Code. SCA (Software Composition Analysis) prüft unsere \"Zutatenliste\", die SBOM, auf bekannte Allergien, also auf Sicherheitslücken in den externen Bibliotheken, die wir nutzen. Und Secret Scanning sucht nach dem versehentlich im Code vergessenen Backstage-Pass – also nach Passwörtern oder API-Schlüsseln."
    },
    {
        "type": "speaker-b",
        "text": "Fantastisch erklärt. Wir liefern also quasi ein Produkt mit Sicherheits-TÜV und transparenter Zutatenliste. Und wie kommt dieses Qualitätsprodukt dann in die Welt?"
    },
    {
        "type": "speaker-a",
        "text": "Der Prozess ist klar: Nach den internen Checks und der Freigabe durch dich... [zwinkert] ...wird der Code auf den externen Plattformen veröffentlicht. Bevorzugt auf OpenCoDE.de, unserem Schaufenster für die deutsche Verwaltung."
    },
    {
        "type": "speaker-b",
        "text": "Und dann ist Feierabend? Code online, Haken dran, nächstes Projekt?"
    },
    {
        "type": "speaker-a",
        "text": "Auf keinen Fall, und das ist der wichtigste Kulturwandel. Die Arbeit fängt dann erst richtig an."
    },
    {
        "type": "speaker-b",
        "text": "Was machen wir, wenn 'TrollHunter42' ein Issue aufmacht und schreibt: \"Euer Code ist Schrott\"? Was ist die Reaktion nach unserer neuen Anweisung?"
    },
    {
        "type": "speaker-a",
        "text": "[lacht] Tja, was würdest du als Abteilungsleiter vorschlagen?"
    },
    {
        "type": "speaker-b",
        "text": "[ironisch, mit gespieltem Ernst]... Sofort einen Arbeitskreis gründen, um das Feedback zu evaluieren?"
    },
    {
        "type": "speaker-a",
        "text": "[lacht] Falsche Antwort! Die Anweisung sagt: Wir nehmen das professionell. Wir antworten freundlich, fragen nach Details und sehen das Feedback als Geschenk. Wir haben uns sogar ein Ziel von 3-5 Werktagen für eine erste Reaktion gesetzt. Wir lassen die Community nicht im Regen stehen."
    },
    {
        "type": "speaker-b",
        "text": "Das ist der Geist von Open Source. Wir gehen in den Dialog, wir lernen und verbessern uns gemeinsam. Ich kann es kaum erwarten zu sehen, welche großartigen Dinge daraus entstehen."
    },
    {
        "type": "speaker-a",
        "text": "Perfekt. Achim, danke, dass du die Vision hinter meiner praktischen Arbeit heute so klar skizziert hast."
    },
    {
        "type": "speaker-b",
        "text": "Und danke dir, Andreas, dass du diese Vision in ein so klares und funktionierendes Regelwerk gegossen hast!"
    },
    {
        "type": "speaker-a",
        "text": "Und an euch im CCW: Wo finden wir diese Anweisung denn nun, Achim?"
    },
    {
        "type": "speaker-b",
        "text": "Sie ist zentral im Confluence im Bereich des CCW abgelegt und für alle zugänglich. Einfach nach \"Arbeitsanweisung Open Source\" suchen. Aber so richtig verwaltungs-like wird es erst wenn die Anweisung in der E-Akte ist. Da könnt ihr sie auch finden."
    },
    {
        "type": "speaker-a",
        "text": "Super. Das war's für heute bei \"Entwickler-Behörde\". Bis zum nächsten Mal!"
    },
    {
        "type": "direction",
        "text": "[Jingle von Anfang wird wieder eingespielt und blendet aus.]"
    }
]